package com.curry.wk.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

import com.curry.wk.commons.ClientSocket;
import com.curry.wk.commons.ServerSocket;
import com.curry.wk.entities.Room;
import com.curry.wk.entities.User;
import com.curry.wk.service.GameService;
import com.curry.wk.service.RoomService;
import com.curry.wk.service.UserService;

/** 
* @author Curry
* @date Apr 7, 2017
* @version 0.1
*/
@Controller
public class SocketController {

	@Autowired
	private RoomService roomService;
	@Autowired
	private GameService gameService;
	@Autowired
	private UserService userService;
	@Autowired
	private SimpMessagingTemplate simpMessagingTemplate;
	
	private static final Logger logger = LoggerFactory.getLogger(SocketController.class);
	
	@MessageMapping("/joinRoom")//@MessageMapping和@RequestMapping功能类似，用于设置URL映射地址，浏览器向服务器发起请求，需要通过该地址
    @SendTo("/topic/joinRoom")//如果服务器接受到了消息，就会对订阅了@SendTo括号中的地址传送消息
    public ServerSocket playersChange(ClientSocket clientSocket) throws Exception {
		int roomId = clientSocket.getDestination();
		Room room = roomService.getRoom(roomId);
		if (room == null){
	        return new ServerSocket(null, null, "room is not exist!");
		}
		List<User> list = roomService.getPlayers(roomId);
		User source = userService.findOne(clientSocket.getSource());
        return new ServerSocket(source, list, "refresh room");
    }
	
	@MessageMapping("/chatRoom")
    @SendTo("/topic/chatRoom")
    public ServerSocket chat(ClientSocket clientSocket) throws Exception {
		int roomId = clientSocket.getDestination();
		Room room = roomService.getRoom(roomId);
		if (room == null){
	        return new ServerSocket(null, null, "room is not exist!");
		}
		List<User> list = roomService.getPlayers(roomId);
		User source = userService.findOne(clientSocket.getSource());
        return new ServerSocket(source, list, clientSocket.getData());
    }
	
	@MessageMapping("/ready")
    @SendTo("/topic/ready")
    public ServerSocket ready(ClientSocket clientSocket) throws Exception {
		
		int roomId = clientSocket.getDestination();
		Room room = roomService.getRoom(roomId);
		if (room == null){
	        return new ServerSocket(null, null, "room is not exist!");
		}
		List<User> list = roomService.getPlayers(roomId);
		User source = userService.findOne(clientSocket.getSource());
		if (roomService.isReady(clientSocket.getDestination())){
			List<String> roles = gameService.buildRole("");
			ServerSocket serverSocket = new ServerSocket(source, list, roles, "allocateRole");
			simpMessagingTemplate.convertAndSend("/topic/role", serverSocket);
			serverSocket = new ServerSocket(source, list, 1);
			simpMessagingTemplate.convertAndSend("/topic/game", serverSocket);
		}
        return new ServerSocket(source, list, clientSocket.getData(), clientSocket.getMessage());
    }
	
	@MessageMapping("/say")
    @SendTo("/topic/say")
    public ServerSocket say(ClientSocket clientSocket) throws Exception {
		int roomId = clientSocket.getDestination();
		Room room = roomService.getRoom(roomId);
		if (room == null){
	        return new ServerSocket(null, null, "room is not exist!");
		}
		List<User> list = roomService.getPlayers(roomId);
		User source = userService.findOne(clientSocket.getSource());
        return new ServerSocket(source, list, clientSocket.getData());
    }
	
	@MessageMapping("/role")
    @SendTo("/topic/role")
    public ServerSocket role(ClientSocket clientSocket) throws Exception {
		int roomId = 1010;
		Room room = roomService.getRoom(roomId);
		if (room == null){
	        return new ServerSocket(null, null, "room is not exist!");
		}
		List<User> list = roomService.getPlayers(roomId);
		User source = userService.findOne(clientSocket.getSource());
        return new ServerSocket(source, list, clientSocket.getData(), "allocateRole!");
    }
	
	@MessageMapping("/video")
    @SendTo("/topic/video")
    public ServerSocket video(ClientSocket clientSocket) throws Exception {
		int roomId = clientSocket.getDestination();
		Room room = roomService.getRoom(roomId);
		if (room == null){
	        return new ServerSocket(null, null, "room is not exist!");
		}
		List<User> list = roomService.getPlayers(roomId);
		User source = userService.findOne(clientSocket.getSource());
        return new ServerSocket(source, list, clientSocket.getData(), "video");
    }
	
	@MessageMapping("/game")
    @SendTo("/topic/game")
    public ServerSocket game(ClientSocket clientSocket) throws Exception {
		/**
		 * 1 提示开始游戏
		 * 2 
		 */
//		int type = clientSocket.getType();
		int roomId = clientSocket.getDestination();
		Room room = roomService.getRoom(roomId);
		if (room == null){
	        return new ServerSocket(null, null, "room is not exist!");
		}
		List<User> list = roomService.getPlayers(roomId);
		User source = userService.findOne(clientSocket.getSource());
        return new ServerSocket(source, list, clientSocket.getData(), "video");
    }
}
